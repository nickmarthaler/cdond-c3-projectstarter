version: 2.1

orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.6

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.     
    steps:
      - run:
          name: Revert migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations:revert
          when: on_fail
            
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build

  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build

  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Test Frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test
                
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Test Backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Scan frontend Audit
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical
  #           npm audit --audit-level=critical

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Scan backend Audit
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical
  #           npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip  
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 

      - run:
          name: Add Backend IP to Ansible Inventory
          command: |
            echo -e "[web]\n" > inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["58:01:95:59:6e:be:db:1c:e2:4f:53:ae:f3:ed:82:40"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd 
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            pwd
            ls .
            npm install
            npm run migrations | tee migration_dump.txt
            cat migration_dump.txt
      - run:
          name: Send migration results to KVDB
          working_directory: ./backend
          command: |
            pwd
            ls
            if grep -q "has been executed successfully" migration_dump.txt
            then
            curl --insecure https://kvdb.io/KBYf9Y4XGmLYrZEV7QfLcn/migration_$\{CIRCLE_WORKFLOW_ID:0:5\} -d '1'
            fi

      - destroy-environment 

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |         
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Get Backend IP Addr
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            export BACKEND_IP=`cat .circleci/ansible/inventory.txt`
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env" 
            echo NODE_ENV=production >> "frontend/.env"
     
      - run:  
          name: configure server
          working_directory: ./frontend         
          command: |
            npm install
            cat .env
            ls -la
            npm run build
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend          
          command: |
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

      - destroy-environment
      - revert-migrations 
                    
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["58:01:95:59:6e:be:db:1c:e2:4f:53:ae:f3:ed:82:40"]
      - attach_workspace:
          at: .circleci/ansible

      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible          
          command: |
            cat inventory.txt
            apk add --update ansible curl rsync openssh nodejs npm unzip
            npm install
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version 
            export ANSIBLE_HOST_KEY_CHECKING=False

      # - run:
      #     name: Get Backend IP Addr
      #     command: |
      #       aws ec2 describe-instances \
      #       --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #       --output text >> .circleci/ansible/inventory.txt
      #       cat .circleci/ansible/inventory.txt

      - run:
          name: install node modules
          command: |
            cd /root/project/backend
            npm install
      - run:
          name: build backend dist
          command: |
            cd /root/project/backend
            npm i
            npm run build
            npm run prestart:prod      
      - run:
          name: Compress dist files on SYSTEN
          command: |
            cd /root/project
            pwd
            tar -cvzf backend.tar.gz backend      
      
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          no_output_timeout: 30m          
          command: |
            pwd
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False
            ansible-playbook -i inventory.txt deploy-backend.yml -vv
            exit 1
      - destroy-environment
      - revert-migrations

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #   #  filters:
      #   #    branches:
      #   #      only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]